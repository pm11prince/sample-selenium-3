status = warn
name= properties_configuration

# Give directory path where log files should get stored
property.basePath = ./log/

# ConsoleAppender will print logs on console
appender.console.type = Console
appender.console.name = consoleLogger
appender.console.target = SYSTEM_OUT
appender.console.layout.type = PatternLayout

# Specify the pattern of the logs
appender.console.layout.pattern=%d{dd-MM-yyyy HH:mm:ss} [%-5p] (%F:%L) - %m%n


# RollingFileAppender will print logs in file which can be rotated based on time or size
appender.rolling.type = RollingFile
appender.rolling.name = fileLogger
appender.rolling.fileName= ${basePath}/app.log
appender.rolling.filePattern= ${basePath}/app-%d{yyyy-MM-dd}-%i.log
appender.rolling.layout.type = PatternLayout
appender.rolling.layout.pattern = %d{dd-MM-yyyy HH:mm:ss} [%-5p] (%F:%L) - %m%n
appender.rolling.policies.type = Policies

# Rotate log file each day and keep 30 days worth
#appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
#appender.rolling.policies.time.interval = 1
#appender.rolling.policies.time.modulate = true
#appender.rolling.strategy.type = DefaultRolloverStrategy
#appender.rolling.strategy.delete.type = Delete
#appender.rolling.strategy.delete.basePath = ${basePath}
#appender.rolling.strategy.delete.maxDepth = 1
#appender.rolling.strategy.delete.ifLastModified.type = IfLastModified
# Delete files older than 30 days
#appender.rolling.strategy.delete.ifLastModified.age = 30d

#File appender
appender.FILE.type = RollingFile
appender.FILE.name = FILE
appender.FILE.fileName = ${basePath}/app.log
appender.FILE.filePattern = ${basePath}/log-%d{yyyy-MM-dd}-%i.log
appender.FILE.layout.type = PatternLayout
appender.FILE.layout.pattern = %d{dd-MM-yyyy HH:mm:ss} [%-5p] (%F:%L) - %m%n
appender.FILE.policies.type = Policies
#appender.FILE.policies.size.type = SizeBasedTriggeringPolicy
#appender.FILE.policies.size.size = 50MB
#appender.FILE.strategy.type = DefaultRolloverStrategy
#appender.FILE.strategy.max = 1

# Configure root logger for logging error logs in classes which are in package other than above specified package
rootLogger.level = error
rootLogger.level = info
rootLogger.level = debug
rootLogger.additivity = false
rootLogger.appenderRef.rolling.ref = fileLogger
rootLogger.appenderRef.console.ref = consoleLogger